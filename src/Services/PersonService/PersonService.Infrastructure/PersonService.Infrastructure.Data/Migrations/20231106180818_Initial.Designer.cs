// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace PersonService.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231106180818_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("WalletName")
                        .HasColumnType("text")
                        .HasColumnName("wallet_name");

                    b.HasKey("Id");

                    b.ToTable("Persons", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Referal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Income")
                        .HasColumnType("numeric")
                        .HasColumnName("income");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Person_name");

                    b.Property<Guid>("ReferalId")
                        .HasColumnType("uuid")
                        .HasColumnName("referal_id");

                    b.Property<string>("ReferalName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("referal_name");

                    b.HasKey("Id");

                    b.HasIndex("ReferalId");

                    b.ToTable("referals", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.OwnsOne("Domain.Value_Objects.ProfileCreationDate", "ProfileCreationDate", b1 =>
                        {
                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.Property<DateOnly>("CreationDate")
                                .HasColumnType("date")
                                .HasColumnName("profile_created_date");

                            b1.HasKey("PersonId");

                            b1.ToTable("Persons");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("ProfileCreationDate")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Referal", b =>
                {
                    b.HasOne("Domain.Entities.Person", null)
                        .WithMany("Referals")
                        .HasForeignKey("ReferalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Navigation("Referals");
                });
#pragma warning restore 612, 618
        }
    }
}
